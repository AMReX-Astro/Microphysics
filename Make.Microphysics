AMREX_HOME ?= /path/to/amrex
MICROPHYSICS_HOME ?= /path/to/Castro
CVODE_HOME ?= /path/to/CVODE

# default is not to compile with CUDA
USE_CUDA ?= FALSE

CUDA_VERBOSE ?= FALSE

# default is not to compile in the conductivity
USE_CONDUCTIVITY ?= FALSE

# system blas
BLAS_LIBRARY ?= -lopenblas

TOP := $(MICROPHYSICS_HOME)

# default microphysics locations
EOS_HOME ?= $(TOP)/EOS
NETWORK_HOME ?= $(TOP)/networks
CONDUCTIVITY_HOME ?= $(TOP)/conductivity

EBASE ?= main

# EXTERN_CORE is simply a list of the directories we use in EOS,
# Networks and Util this list will be searched for runtime parameters
EXTERN_CORE ?=


ifeq ($(USE_SYSTEM_BLAS), TRUE)
  LIBRARIES += $(BLAS_LIBRARY)
endif

MANAGED_PROBIN_FLAG :=
ifdef USE_CUDA
  ifeq ($(USE_CUDA),TRUE)
    MANAGED_PROBIN_FLAG := --managed
    USE_GPU_PRAGMA = TRUE
    DEFINES += -DCUDA
  endif
endif

include $(AMREX_HOME)/Tools/GNUMake/Make.defs

MICROPHYSICS_AUTO_SOURCE_DIR := $(TmpBuildDir)/microphysics_sources/$(optionsSuffix).EXE

all: build_status $(executable) starkiller_library
	@echo SUCCESS

build_status:
	$(AMREX_HOME)/Tools/C_scripts/describe_sources.py \
          --git_names "Castro AMReX Microphysics" \
          --git_dirs "$(TOP) $(AMREX_HOME) $(MICROPHYSICS_HOME)"

starkiller_library: $(executable)
ifeq ($(USE_COMPILE_WITH_F2PY), TRUE)
	@echo Wrapping sources with f90wrap ...
	sh dowrap.sh
	@echo Linking objects with f2py ...
	sh dof2py.sh
endif

# Use a coarse grained OMP approach
DEFINES += -DCRSEGRNDOMP


# OpenACC support
ifeq ($(USE_ACC), TRUE)
  DEFINES += -DACC
endif

ifeq ($(USE_SIMPLIFIED_SDC), TRUE)
  DEFINES += -DSIMPLIFIED_SDC
endif

ifeq ($(USE_REACT), TRUE)
  DEFINES += -DREACTIONS
endif

ifeq ($(USE_REACT_SPARSE_JACOBIAN), TRUE)
  DEFINES += -DREACT_SPARSE_JACOBIAN

  # The following is sometimes useful to turn on for debugging sparse J indices
  # (if a get/set/scale is called with (row, col) not in the sparse J, stop)
  # Otherwise, set/scale do nothing, and get returns 0.
  ifeq ($(USE_SPARSE_STOP_ON_OOB), TRUE)
    DEFINES += -DSPARSE_STOP_ON_OOB
  endif
endif

ifeq ($(USE_COMPILE_WITH_F2PY), TRUE)
  DEFINES += -DCOMPILE_WITH_F2PY
endif

#------------------------------------------------------------------------------
# CVODE directories
#------------------------------------------------------------------------------
include $(MICROPHYSICS_HOME)/Make.CVODE


#------------------------------------------------------------------------------
# AMReX
#------------------------------------------------------------------------------

# core AMReX directories -- note the Make.package for these adds these
# directories into VPATH_LOCATIONS and INCLUDE_LOCATIONS for us, so we
# don't need to do it here

ifeq ($(USE_AMR_CORE), TRUE)
  Pdirs	:= Base AmrCore Amr Boundary
else
  Pdirs := Base
endif

Bpack  += $(foreach dir, $(Pdirs), $(AMREX_HOME)/Src/$(dir)/Make.package)


#------------------------------------------------------------------------------
# microphysics
#------------------------------------------------------------------------------
NETWORK_OUTPUT_PATH := $(MICROPHYSICS_AUTO_SOURCE_DIR)

include $(MICROPHYSICS_HOME)/Make.Microphysics_extern

Bpack += $(foreach dir, $(EXTERN_CORE), $(dir)/Make.package)
Blocs += $(foreach dir, $(EXTERN_CORE), $(dir))


#------------------------------------------------------------------------------
# include all of the necessary directories
#------------------------------------------------------------------------------

include $(Bpack)

# this is a safety from the mega-fortran attempts
f90EXE_sources += $(ca_f90EXE_sources)
F90EXE_sources += $(ca_F90EXE_sources)

INCLUDE_LOCATIONS += $(Blocs)
VPATH_LOCATIONS   += $(Blocs)


#------------------------------------------------------------------------------
# make generated source files location
#------------------------------------------------------------------------------
VPATH_LOCATIONS += $(MICROPHYSICS_AUTO_SOURCE_DIR)
INCLUDE_LOCATIONS += $(MICROPHYSICS_AUTO_SOURCE_DIR)


#------------------------------------------------------------------------------
# runtime parameters
#------------------------------------------------------------------------------

# runtime parameter support for extern/ routines
F90EXE_sources += extern.F90
CEXE_sources += extern_parameters.cpp
FEXE_headers += extern_parameters_F.H
CEXE_headers += extern_parameters.H

EXTERN_TEMPLATE := $(MICROPHYSICS_HOME)/interfaces/extern_probin.template

# these are for finding runtime parameters
EXTERN_SEARCH += $(EXTERN_CORE) $(MICROPHYSICS_HOME)/unit_test
ifdef MICROPHYSICS_HOME
   EXTERN_SEARCH += $(MICROPHYSICS_HOME)/networks/
endif

EXTERN_PARAMETERS := $(shell $(AMREX_HOME)/Tools/F_scripts/findparams.py $(EXTERN_SEARCH))

$(MICROPHYSICS_AUTO_SOURCE_DIR)/extern_parameters.cpp: $(MICROPHYSICS_AUTO_SOURCE_DIR)/extern.F90

$(MICROPHYSICS_AUTO_SOURCE_DIR)/extern.F90: $(EXTERN_PARAMETERS) $(EXTERN_TEMPLATE)
	@if [ ! -d $(MICROPHYSICS_AUTO_SOURCE_DIR) ]; then mkdir -p $(MICROPHYSICS_AUTO_SOURCE_DIR); fi
	$(AMREX_HOME)/Tools/F_scripts/write_probin.py \
           -t $(EXTERN_TEMPLATE) -o $(MICROPHYSICS_AUTO_SOURCE_DIR)/extern.F90 -n extern \
           --cxx_prefix $(MICROPHYSICS_AUTO_SOURCE_DIR)/extern \
           --pa "$(EXTERN_PARAMETERS)" $(MANAGED_PROBIN_FLAG)

#------------------------------------------------------------------------------
# build info
#------------------------------------------------------------------------------

# job_info support
CEXE_headers += $(AMREX_HOME)/Tools/C_scripts/AMReX_buildInfo.H
INCLUDE_LOCATIONS +=  $(AMREX_HOME)/Tools/C_scripts


MNAMES := EOS=$(EOS_PATH) NETWORK=$(NETWORK_PATH) INTEGRATOR=$(INTEGRATOR_DIR)

# we make AMReX_buildInfo.cpp as we make the .o file, so we can delete
# it immediately.  this way if the build is interrupted, we are
# guaranteed to remake it

objForExecs += $(objEXETempDir)/AMReX_buildInfo.o

.FORCE:
.PHONE: .FORCE

# set BUILD_GIT_NAME and BUILD_GIT_DIR if you are building in a
# git-controlled dir not under Castro/
EXTRA_BUILD_INFO :=
ifdef BUILD_GIT_NAME
   EXTRA_BUILD_INFO := --build_git_name "$(BUILD_GIT_NAME)" \
                       --build_git_dir "$(BUILD_GIT_DIR)"
endif

$(objEXETempDir)/AMReX_buildInfo.o: .FORCE
	$(AMREX_HOME)/Tools/C_scripts/makebuildinfo_C.py \
          --amrex_home "$(AMREX_HOME)" \
          --COMP "$(COMP)" --COMP_VERSION "$(COMP_VERSION)" \
          --CXX_comp_name "$(CXX)" --CXX_flags "$(CXXFLAGS) $(CPPFLAGS) $(includes)" \
          --F_comp_name "$(F90)" --F_flags "$(F90FLAGS)" \
          --link_flags "$(LDFLAGS)" --libraries "$(libraries)" \
          --MODULES "$(MNAMES)" $(EXTRA_BUILD_INFO) \
          --GIT "$(TOP) $(AMREX_HOME) $(MICROPHYSICS_HOME)"
	$(SILENT) $(CCACHE) $(CXX) $(CXXFLAGS) $(CPPFLAGS) -c $(CXXEXEFLAGS) AMReX_buildInfo.cpp -o $(objEXETempDir)/AMReX_buildInfo.o
	$(SILENT) $(RM) AMReX_buildInfo.cpp


#------------------------------------------------------------------------------
# finish up
#------------------------------------------------------------------------------

include $(AMREX_HOME)/Tools/GNUMake/Make.rules

clean::
	$(SILENT) $(RM) extern.F90
	$(SILENT) $(RM) network_properties.F90 network_properties.H
	$(SILENT) $(RM) $(MICROPHYSICS_AUTO_SOURCE_DIR)/*.H $(MICROPHYSICS_AUTO_SOURCE_DIR)/*.[fF]90
	$(SILENT) $(RM) extern_parameters.cpp extern_parameters_F.H extern_parameters.H

# Older versions of CASTRO generated a "network.f90" file when using
# the general_null network, which conflicts with our generalized
# network.f90 file.  So we should delete the local copy if we are
# trying to rebuild from an old directory.
# The same is true for "extern.f90".

clean::
	$(RM) network.f90
	$(RM) extern.f90
	@if [ -L helm_table.dat ]; then rm -f helm_table.dat; fi


# for debugging.  To see the value of a Makefile variable,
# e.g. Fmlocs, simply do "make print-Fmlocs".  This will print out the
# value.

print-%::
	@echo "$* is $($*)"
	@$(RM) AMReX_buildInfo.cpp
