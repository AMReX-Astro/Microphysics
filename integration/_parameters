# these are the parameters for the integration module

# When evolving the temperature, should we assume a constant pressure (default) 
# or a constant volume (do\_constant\_volume\_burn = T)?
do_constant_volume_burn  logical   .false.

# Do we call the EOS each time we enter the EOS?  This is expensive,
# but more accurate.  Otherwise, we instead call the EOS at the start
# of the integration and freeze the thermodynamics throughout the RHS
# evalulation.  This only affects the temperature integration (which
# is the input to the rate evaluation). In particular, since we
# calculate the composition factors either way, this determines
# whether we're updating the thermodynamic derivatives and other
# quantities (cp and cv) as we go.
call_eos_in_rhs          logical   .false.

# If we want to call the EOS in general, but don't want to overdo it,
# we can set a fraction dT\_crit such that we only do the EOS call
# if the temperature has changed by a relative fraction $>$ dT\_crit.
# If we use this option, we will do a linear fit to c\_v and c\_p
# in between EOS calls. This will work regardless of call\_eos\_in\_rhs.
dT_crit                  real      1.0d20

# Integration mode: if 0, a hydrostatic burn (temperature and density
# remain constant), and if 1, a self-heating burn (temperature/energy
# evolve with the burning). If 2, a hybrid approach presented by
# Raskin et al. (2010): do hydrostatic everywhere, but if the
# hydrostatic burn gives us a negative energy change, redo the burn in
# self-heating mode.  If 3, do normal self-heating, but limit all
# values of the RHS by the same factor $L$ such that $\dot{e} = f_s e /
# t_s$, where $\dot{e}$ is the energy injection rate, $e$ is the
# internal energy of the zone, $t_s$ is the sound crossing time, and
# $f_s$ is a safety factor. $L$ is computed as min(1, $f_s (e / \dot{e}) / t_s$).
burning_mode             integer   1

# If we're using burning\_mode == 3, this is the safety factor $f_s$ to use.
burning_mode_factor      real      1.d-1

# Allow the temperature integration to be disabled by setting the RHS to zero.
integrate_temperature    logical   .true.

# Allow the energy integration to be disabled by setting the RHS to zero.
integrate_energy         logical   .true.

# Whether to use an analytical or numerical Jacobian.
# 1 == Analytical
# 2 == Numerical
jacobian                 integer   1

# one-sided numerical jacobian (.False.) or centered-difference
# Jacobian (.true.).  Note: the centered-difference requires
# twice as many RHS calls
centered_diff_jac        logical   .false.


# Should we print out diagnostic output after the solve?  
burner_verbose           logical   .false.

# Tolerances for the solver (relative and absolute), for the
# species, temperature, and energy equations.
rtol_spec                real      1.d-12
rtol_temp                real      1.d-6
rtol_enuc                real      1.d-6

atol_spec                real      1.d-12
atol_temp                real      1.d-6
atol_enuc                real      1.d-6

# If we fail to find a solution consistent with the tolerances,
# do we want to try again with a looser tolerance?
retry_burn               logical   .false.

# If we do retry a burn, by what factor should we loosen the tolerance?
retry_burn_factor        real      1.25d0

# What is the maximum factor we can increase the original tolerances by?
retry_burn_max_change    real      1.0d2

# Whether to renormalize the mass fractions at each step in the evolution
# so that they sum to unity.
renormalize_abundances   logical   .false.
