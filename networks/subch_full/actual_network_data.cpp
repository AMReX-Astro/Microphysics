#include <actual_network.H>


namespace network
{
    AMREX_GPU_MANAGED amrex::Array1D<amrex::Real, 1, NumSpec> bion;
    AMREX_GPU_MANAGED amrex::Array1D<amrex::Real, 1, NumSpec> mion;
}

#ifdef NSE_NET
namespace NSE_INDEX
{
    AMREX_GPU_MANAGED amrex::Array2D<int, 1, Rates::NumRates, 1, 7, Order::C> rate_indices {
        -1, -1, 3, -1, 0, 2, -1,
        -1, -1, 5, -1, 1, 2, -1,
        -1, -1, 6, -1, 1, 4, -1,
        -1, -1, 7, -1, 1, 5, -1,
        -1, -1, 9, -1, 0, 8, -1,
        -1, -1, 9, -1, 1, 6, -1,
        -1, -1, 11, -1, 0, 10, -1,
        -1, -1, 11, -1, 1, 7, -1,
        -1, -1, 12, -1, 1, 10, -1,
        -1, -1, 13, -1, 0, 12, -1,
        -1, -1, 13, -1, 1, 11, -1,
        -1, -1, 14, -1, 1, 12, -1,
        -1, -1, 15, -1, 0, 14, -1,
        -1, -1, 15, -1, 1, 13, -1,
        -1, -1, 16, -1, 1, 14, -1,
        -1, -1, 17, -1, 0, 16, -1,
        -1, -1, 17, -1, 1, 15, -1,
        -1, -1, 18, -1, 1, 16, -1,
        -1, -1, 19, -1, 0, 18, -1,
        -1, -1, 19, -1, 1, 17, -1,
        -1, -1, 20, -1, 1, 18, -1,
        -1, -1, 21, -1, 0, 20, -1,
        -1, -1, 21, -1, 1, 19, -1,
        -1, -1, 22, -1, 1, 20, -1,
        -1, -1, 23, -1, 0, 22, -1,
        -1, -1, 23, -1, 1, 21, -1,
        -1, -1, 24, -1, 1, 22, -1,
        -1, -1, 25, -1, 0, 24, -1,
        -1, -1, 25, -1, 1, 23, -1,
        -1, -1, 26, -1, 1, 24, -1,
        -1, -1, 27, -1, 0, 26, -1,
        -1, -1, 27, -1, 1, 25, -1,
        -1, -1, 2, 1, 1, 1, -1,
        -1, 0, 2, -1, -1, 3, 1,
        -1, 1, 2, -1, -1, 5, 2,
        -1, 1, 4, -1, -1, 6, 3,
        -1, 1, 5, -1, -1, 7, 4,
        -1, 1, 6, -1, -1, 9, 6,
        -1, 1, 7, -1, -1, 11, 8,
        -1, 0, 8, -1, -1, 9, 5,
        -1, 0, 10, -1, -1, 11, 7,
        -1, 1, 10, -1, -1, 12, 9,
        -1, 1, 11, -1, -1, 13, 11,
        -1, 0, 12, -1, -1, 13, 10,
        -1, 1, 12, -1, -1, 14, 12,
        -1, 1, 13, -1, -1, 15, 14,
        -1, 0, 14, -1, -1, 15, 13,
        -1, 1, 14, -1, -1, 16, 15,
        -1, 1, 15, -1, -1, 17, 17,
        -1, 0, 16, -1, -1, 17, 16,
        -1, 1, 16, -1, -1, 18, 18,
        -1, 1, 17, -1, -1, 19, 20,
        -1, 0, 18, -1, -1, 19, 19,
        -1, 1, 18, -1, -1, 20, 21,
        -1, 1, 19, -1, -1, 21, 23,
        -1, 0, 20, -1, -1, 21, 22,
        -1, 1, 20, -1, -1, 22, 24,
        -1, 1, 21, -1, -1, 23, 26,
        -1, 0, 22, -1, -1, 23, 25,
        -1, 1, 22, -1, -1, 24, 27,
        -1, 1, 23, -1, -1, 25, 29,
        -1, 0, 24, -1, -1, 25, 28,
        -1, 1, 24, -1, -1, 26, 30,
        -1, 1, 25, -1, -1, 27, 32,
        -1, 0, 26, -1, -1, 27, 31,
        -1, 2, 2, -1, 0, 10, 81,
        -1, 2, 2, -1, 1, 7, 76,
        -1, 1, 3, -1, 0, 5, 69,
        -1, 0, 5, -1, 1, 3, -1,
        -1, 2, 5, -1, 0, 12, 85,
        -1, 2, 5, -1, 1, 11, 83,
        -1, 5, 5, -1, 0, 14, 91,
        -1, 5, 5, -1, 1, 13, 88,
        -1, 1, 6, -1, 0, 8, 79,
        -1, 1, 7, -1, 0, 10, -1,
        -1, 1, 7, -1, 2, 2, -1,
        -1, 2, 7, -1, 0, 14, 90,
        -1, 2, 7, -1, 1, 13, 87,
        -1, 0, 8, -1, 1, 6, -1,
        -1, 0, 10, -1, 1, 7, 75,
        -1, 0, 10, -1, 2, 2, -1,
        -1, 1, 11, -1, 0, 12, -1,
        -1, 1, 11, -1, 2, 5, -1,
        -1, 0, 12, -1, 1, 11, 82,
        -1, 0, 12, -1, 2, 5, -1,
        -1, 1, 13, -1, 0, 14, -1,
        -1, 1, 13, -1, 2, 7, -1,
        -1, 1, 13, -1, 5, 5, -1,
        -1, 0, 14, -1, 1, 13, 86,
        -1, 0, 14, -1, 2, 7, -1,
        -1, 0, 14, -1, 5, 5, -1,
        -1, 1, 15, -1, 0, 16, -1,
        -1, 0, 16, -1, 1, 15, 92,
        -1, 1, 17, -1, 0, 18, -1,
        -1, 0, 18, -1, 1, 17, 94,
        -1, 1, 19, -1, 0, 20, -1,
        -1, 0, 20, -1, 1, 19, 96,
        -1, 1, 21, -1, 0, 22, -1,
        -1, 0, 22, -1, 1, 21, 98,
        -1, 1, 23, -1, 0, 24, 101,
        -1, 0, 24, -1, 1, 23, -1,
        -1, 1, 25, -1, 0, 26, 103,
        -1, 0, 26, -1, 1, 25, -1,
        1, 1, 1, -1, -1, 2, 33,
        -1, 2, 2, -1, -1, 11, -1,
        -1, 5, 5, -1, -1, 15, -1,
        -1, 2, 5, -1, -1, 13, -1
    };
}
#endif

void actual_network_init()
{
    using namespace Species;
    using namespace network;

    // binding energies per nucleon in MeV
    amrex::Array1D<amrex::Real, 1, NumSpec> ebind_per_nucleon;

    ebind_per_nucleon(H1) = 0.0_rt;
    ebind_per_nucleon(He4) = 7.073915_rt;
    ebind_per_nucleon(C12) = 7.680144_rt;
    ebind_per_nucleon(N13) = 7.238863_rt;
    ebind_per_nucleon(N14) = 7.475613999999999_rt;
    ebind_per_nucleon(O16) = 7.976206_rt;
    ebind_per_nucleon(F18) = 7.631638_rt;
    ebind_per_nucleon(Ne20) = 8.03224_rt;
    ebind_per_nucleon(Ne21) = 7.971712999999999_rt;
    ebind_per_nucleon(Na22) = 7.915667_rt;
    ebind_per_nucleon(Na23) = 8.111493000000001_rt;
    ebind_per_nucleon(Mg24) = 8.260709_rt;
    ebind_per_nucleon(Al27) = 8.331553_rt;
    ebind_per_nucleon(Si28) = 8.447744_rt;
    ebind_per_nucleon(P31) = 8.481167_rt;
    ebind_per_nucleon(S32) = 8.493129000000001_rt;
    ebind_per_nucleon(Cl35) = 8.520278000000001_rt;
    ebind_per_nucleon(Ar36) = 8.519909_rt;
    ebind_per_nucleon(K39) = 8.557025_rt;
    ebind_per_nucleon(Ca40) = 8.551303_rt;
    ebind_per_nucleon(Sc43) = 8.530825_rt;
    ebind_per_nucleon(Ti44) = 8.533520000000001_rt;
    ebind_per_nucleon(V47) = 8.582225000000001_rt;
    ebind_per_nucleon(Cr48) = 8.572269_rt;
    ebind_per_nucleon(Mn51) = 8.633772_rt;
    ebind_per_nucleon(Fe52) = 8.609574_rt;
    ebind_per_nucleon(Co55) = 8.669618_rt;
    ebind_per_nucleon(Ni56) = 8.642779_rt;

    // convert to binding energies per nucleus in MeV
    for (int i = 1; i <= NumSpec; ++i) {
        bion(i) = ebind_per_nucleon(i) * aion[i-1];
    }

    // Set the mass -- this will be in grams
    for (int i = 1; i <= NumSpec; ++i) {
        mion(i) = (aion[i-1] - zion[i-1]) * C::Legacy::m_n + zion[i-1] * (C::Legacy::m_p + C::Legacy::m_e) - bion(i) * C::Legacy::MeV2gr;
    }

}
