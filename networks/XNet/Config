##python:genLines
 
#  Configuration file for XNet
#  [physics/sourceTerms/Burn/BurnMain/nuclearBurn/XNet]

import os.path
import globals
from globals import *

def genLines(setupvars):

    ##
    yield 'PPDEFINE XNET'

    ##
    yield 'REQUIRES Multispecies'
    yield 'REQUIRES Simulation/SimulationComposition/Burn/XNet'
    yield 'REQUIRES physics/Eos'

    yield 'USESETUPVARS xnetGPU'
    yield 'IF xnetGPU'
    yield '   REQUIRES physics/sourceTerms/Burn/BurnMain/nuclearBurn/XNet/GPU'
    yield 'ENDIF'

    yield 'LIBRARY LAPACK'

    yield 'DATAFILES Networks'

    ##
    yield 'VARIABLE mtsb'
    yield 'VARIABLE nmpi'

    ##
    yield 'D xnet_nzbatchmx        number of zones to batch and pass to burner'
    yield 'D xnet_iweak            controls the treatment of weak reactions'
    yield 'D xnet_iscrn            controls the treatment of nuclear screening'
    yield 'D xnet_iprocess         controls the runtime pre-processing of the network data'
    yield 'D xnet_isolv            choice of integration scheme'
    yield 'D xnet_kstmx            max timesteps for each zone'
    yield 'D xnet_kitmx            max Newton-Raphson iterations before retry'
    yield 'D xnet_ijac             rebuild jacobian every ijac iterations after the first'
    yield 'D xnet_iconvc           determines which convergence condition is used'
    yield 'D xnet_changemx         allowed abundance change used to set the network timestep'
    yield 'D xnet_yacc             abundances > yacc used for timestep calculation'
    yield 'D xnet_tolm             mass conservation convergence criterion (iconvc=0)'
    yield 'D xnet_tolc             convergence limit on the iterative abundance change (iconvc=1)'
    yield 'D xnet_ymin             abundance < ymin is set to 0.0'
    yield 'D xnet_tdel_maxmult     max factor by which the network timestep is changed'
    yield 'D xnet_iheat            controls the treatment of self-heating'
    yield 'D xnet_changemxt        allowed temperature change used to set the network timestep'
    yield 'D xnet_tolt9            convergence limit on the iterative temperature change'
    yield 'D xnet_idiag            sets XNet diagnostic output level'
    yield 'D xnet_writeTimers      controls whether to write XNet internal timers to stdout'

    ##
    yield 'PARAMETER xnet_nzbatchmx        INTEGER         16      [1 to ]'
    yield 'PARAMETER xnet_iweak            INTEGER         1       [0 to 1]'
    yield 'PARAMETER xnet_iscrn            INTEGER         1       [0 to 1]'
    yield 'PARAMETER xnet_iprocess         INTEGER         1       [0 to 1]'
    yield 'PARAMETER xnet_isolv            INTEGER         1       [1 to 2]'
    yield 'PARAMETER xnet_kstmx            INTEGER         2000    [1 to ]'
    yield 'PARAMETER xnet_kitmx            INTEGER         5       [1 to ]'
    yield 'PARAMETER xnet_ijac             INTEGER         1       [1 to ]'
    yield 'PARAMETER xnet_iconvc           INTEGER         0       [0 to 1]'
    yield 'PARAMETER xnet_changemx         REAL            1.0e-1  [0.0 to 1.0]'
    yield 'PARAMETER xnet_yacc             REAL            1.0e-7  [0.0 to 1.0]'
    yield 'PARAMETER xnet_tolm             REAL            1.0e-6  [0.0 to 1.0]'
    yield 'PARAMETER xnet_tolc             REAL            1.0e-4  [0.0 to 1.0]'
    yield 'PARAMETER xnet_ymin             REAL            1.0e-25 [0.0 to 1.0]'
    yield 'PARAMETER xnet_tdel_maxmult     REAL            2.0e+0  [1.0 to ]'
    yield 'PARAMETER xnet_iheat            INTEGER         0       [0 to 1]'
    yield 'PARAMETER xnet_changemxt        REAL            1.0e-2  [0.0 to 1.0]'
    yield 'PARAMETER xnet_tolt9            REAL            1.0e-4  [0.0 to 1.0]'
    yield 'PARAMETER xnet_idiag            INTEGER         0       [0 to 5]'
    yield 'PARAMETER xnet_writeTimers      BOOLEAN         FALSE'

    ##
    if 'xnetData' in setupvars:
        xnet_data_dir = os.path.join('Networks',setupvars['xnetData'])
    else:
        xnet_data_dir = os.path.join('Networks','Data_SN160')

    yield 'PARAMETER xnet_data_dir         STRING          "%s"' % xnet_data_dir
    
    filename = os.path.join(GVars.sourceDir,'physics','sourceTerms','Burn','BurnMain','nuclearBurn','XNet',xnet_data_dir,'sunet')
    file = open(filename,'r')
    for line in file:
        yield 'SPECIES %s' % line
