#define NSPECIES @@NSPEC@@
#define NAUXILIARY @@NAUX@@

module actual_network

   use bl_types, only: dp_t
   use xnet_constants, only: avn, clt, epmev, m_n, m_p, m_e

   implicit none

   real(dp_t), parameter, private :: clight = clt
   real(dp_t), parameter, private :: mev2erg = epmev
   real(dp_t), parameter, private :: ev2erg  = mev2erg*1.0d-6
   real(dp_t), parameter, private :: mev2gr  = mev2erg/clight**2

   real(dp_t), parameter, private :: mn = m_n*mev2gr
   real(dp_t), parameter, private :: mp = m_p*mev2gr
   real(dp_t), parameter, private :: me = m_e*mev2gr

   integer, parameter :: nspec = NSPECIES
   integer, parameter :: nspec_evolve = NSPECIES
   integer, parameter :: naux = NAUXILIARY

   character (len=16), save :: spec_names(NSPECIES) 
   character (len= 5), save :: short_spec_names(NSPECIES)
   character (len= 5), save :: short_aux_names(NAUXILIARY)

   character (len=32), save :: network_name = "@@NETWORK@@"

   real(dp_t), allocatable :: aion(:), zion(:), bion(:)
   real(dp_t), allocatable :: nion(:), mion(:), wion(:)

   !$acc declare create(aion, zion, bion, nion, mion, wion)

   integer, parameter :: nrates = 1
   integer, parameter :: num_rate_groups = 1

   ! Conversion factor for the nuclear energy generation rate.

   real(dp_t), parameter :: avo = avn
   real(dp_t), parameter :: enuc_conv2 = -avo*clight*clight

contains

   subroutine actual_network_init

      use bl_error_module, only: bl_error
      use controls, only: mythread, nthread, myid, nproc, nzbatchmx, iweak0, &
         iscrn, iprocess, isolv, kstmx, kitmx, ijac, iconvc, changemx, yacc, &
         tolm, tolc, ymin, tdel_maxmult, iheat, changemxt, tolt9, idiag, itsout
      use cross_sect_data, only: nreac
      use extern_probin_module, only: xnet_nzbatchmx, xnet_iweak0, &
         xnet_iscrn, xnet_iprocess, xnet_isolv, xnet_kstmx, &
         xnet_kitmx, xnet_ijac, xnet_iconvc, xnet_changemx, &
         xnet_yacc, xnet_tolm, xnet_tolc, xnet_ymin, &
         xnet_tdel_maxmult, xnet_iheat, xnet_changemxt, &
         xnet_tolt9, xnet_idiag, xnet_itsout
      use nuclear_data, only: aa, zz, nn, be, mm, nname
      use nuc_number, only: ny
      use omp_module, only: omp_get_thread_num, omp_get_num_threads
      use parallel, only: parallel_myproc, parallel_nprocs
      use xnet_interface, only: xnet_init

      implicit none

      integer :: i, ierr
      character (len=80) :: data_dir
      character (len=80) :: data_desc

      ! Initialize MPI/OpenMP identifiers
      myid = parallel_myproc()
      nproc = parallel_nprocs()
      !$omp parallel default(shared)
      mythread = omp_get_thread_num()
      !$omp master
      nthread = omp_get_num_threads()
      !$omp end master
      !$omp end parallel

      ! Fill XNet controls data with runtime parameters
      nzbatchmx = xnet_nzbatchmx
      iweak0 = xnet_iweak0
      iscrn = xnet_iscrn
      iprocess = xnet_iprocess
      isolv = xnet_isolv
      kstmx = xnet_kstmx
      kitmx = xnet_kitmx
      ijac = xnet_ijac
      iconvc = xnet_iconvc
      changemx = xnet_changemx
      yacc = xnet_yacc
      tolm = xnet_tolm
      tolc = xnet_tolc
      ymin = xnet_ymin
      tdel_maxmult = xnet_tdel_maxmult
      iheat = xnet_iheat
      changemxt = xnet_changemxt
      tolt9 = xnet_tolt9
      idiag = xnet_idiag
      itsout = xnet_itsout

      ! Initialize XNet data structures, preprocess network, etc...
      data_dir = "Networks/@@NETWORK@@"
      call xnet_init(data_dir,data_desc)

      ! nspec needs to be hard-coded... make sure it matches ny
      if ( ny /= NSPECIES ) then
         call bl_error("ERROR: actual_network.F90: nspec /= ny")
      endif

      allocate(aion(nspec))
      allocate(zion(nspec))
      allocate(nion(nspec))
      allocate(bion(nspec))
      allocate(mion(nspec))
      allocate(wion(nspec))

      do i = 1, nspec
         spec_names(i) = nname(i)
         short_spec_names(i) = nname(i)
      end do
      aion(:) = aa(:)
      zion(:) = zz(:)
      nion(:) = nn(:)
      bion(:) = be(:)
      mion(:) = mm(:)
      wion(:) = aion(:)

      !$acc update device(aion, zion, bion, nion, mion, wion)

   end subroutine actual_network_init

   subroutine actual_network_finalize

      use xnet_interface, only: xnet_finalize

      implicit none

      call xnet_finalize

   end subroutine actual_network_finalize

end module actual_network
