#!/usr/bin/env python

import os.path
import sys
import getopt

Header = """
! DO NOT EDIT THIS FILE!!!
!
! This file is automatically generated by write_network.py at
! compile-time.
!
! To modify the species carried by the network, edit the appropriate inputs
! file.

"""

def get_next_line(fin):
    """get_next_line returns the next, non-blank line, with comments
    stripped"""
    line = fin.readline()

    pos = str.find(line, "#")

    while (pos == 0 or str.strip(line) == "") and line:

        line = fin.readline()
        pos = str.find(line, "#")

    line = line[:pos]

    return line


def parse_net_file(net_file):
    """parse_net_file reads the number of species from an XNet data file

    """

    err = 0
    naux = 0
    nspec = 0

    try:
        f = open(net_file, "r")
    except IOError:
        print("write_network.py: ERROR: file "+str(net_file)+" does not exist")
        sys.exit(2)

    print("write_network.py: reading number of species from "+str(net_file)+"...")

    line = get_next_line(f)
    try:
        nspec = int(line)
    except ValueError:
        print("write_network.py: ERROR: problem reading "+str(net_file))
        sys.exit(2)

    f.close()
    return err, nspec, naux


def abort(outfile):
    """exit when there is an error.  A dummy stub file is written out,
    which will cause a compilation failure

    """

    fout = open(outfile, "w")
    fout.write("There was an error parsing the network files")
    fout.close()
    sys.exit(1)



def write_network(network_template, xnet_data, out_file):
    """read through the list of species and output the new out_file

    """

    print(" ")
    print("write_network.py: creating %s" % (out_file))


    #-------------------------------------------------------------------------
    # read the species defined in the net_file
    #-------------------------------------------------------------------------
    xnet_data_dir = os.path.join('Networks',xnet_data)
    net_file = os.path.join(xnet_data_dir,'netwinv')
    err, nspec, naux = parse_net_file(net_file)

    if err:
        abort(out_file)


    #-------------------------------------------------------------------------
    # open up the template
    #-------------------------------------------------------------------------
    try:
        ftemplate = open(network_template, "r")
    except IOError:
        print("write_network.py: ERROR: file "+str(network_template)+" does not exist")
        sys.exit(2)
    else:
        ftemplate.close()

    ftemplate = open(network_template, "r")

    template_lines = []
    line = ftemplate.readline()
    while line:
        template_lines.append(line)
        line = ftemplate.readline()


    #-------------------------------------------------------------------------
    # output the template, inserting the species info in between the @@...@@
    #-------------------------------------------------------------------------
    fout = open(out_file, "w")

    fout.write(Header)

    for line in template_lines:

        index = line.find("@@")

        if index >= 0:
            index2 = line.rfind("@@")

            keyword = line[index+len("@@"):index2]
            indent = index*" "

            if keyword == "NSPEC":

                fout.write(line.replace("@@NSPEC@@", str(nspec)))

            elif keyword == "NAUX":

                fout.write(line.replace("@@NAUX@@", str(naux)))

            elif keyword == "NETWORK":

                fout.write(line.replace("@@NETWORK@@", xnet_data))

        else:
            fout.write(line)

    print(" ")
    fout.close()


if __name__ == "__main__":

    try:
        opts, _ = getopt.getopt(sys.argv[1:], "t:o:s:")
    except getopt.GetoptError:
        print("write_network.py: invalid calling sequence")
        sys.exit(2)

    network_template = ""
    out_file = ""
    xnet_data = ""

    for o, a in opts:

        if o == "-t":
            network_template = a

        if o == "-o":
            out_file = a

        if o == "-s":
            xnet_data = a


    if network_template == "" or out_file == "":
        print("write_probin.py: ERROR: invalid calling sequence")
        sys.exit(2)

    write_network(network_template, xnet_data, out_file)
