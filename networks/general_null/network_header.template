/* Do not edit -- this is automatically generated by write_network.py
   at compile time */
#include <string>
#include <vector>

#include <AMReX_BLFort.H>
#include <AMReX_Array.H>

#ifndef NETWORK_PROPERTIES_H
#define NETWORK_PROPERTIES_H

#if defined(__GNUC__)
#define MICROPHYSICS_UNUSED [[gnu::unused]]
#else
#define MICROPHYSICS_UNUSED
#endif

#ifdef AMREX_USE_HIP
#define HIP_CONSTEXPR constexpr
#else
#define HIP_CONSTEXPR
#endif

constexpr int NumSpec = @@NSPEC@@;

constexpr int NumSpecExtra = @@NEXTRASPEC@@;

constexpr int NumSpecTotal = NumSpec + NumSpecExtra;

// filled via the preprocessor by including NAUX_NETWORK
constexpr int NumAux = NAUX_NET;

@@PROPERTIES@@

namespace {

    MICROPHYSICS_UNUSED HIP_CONSTEXPR AMREX_GPU_MANAGED amrex::Real aion[NumSpecTotal] = {
       @@AION@@
    };

    MICROPHYSICS_UNUSED HIP_CONSTEXPR AMREX_GPU_MANAGED amrex::Real aion_inv[NumSpecTotal] = {
       @@AION_INV@@
    };

    MICROPHYSICS_UNUSED HIP_CONSTEXPR AMREX_GPU_MANAGED amrex::Real zion[NumSpecTotal] = {
       @@ZION@@
    };

    MICROPHYSICS_UNUSED const std::vector<std::string> short_spec_names_cxx = {
       @@SHORT_SPEC_NAMES@@
    };

    MICROPHYSICS_UNUSED const std::vector<std::string> spec_names_cxx = {
       @@SPEC_NAMES@@
    };

#if NAUX_NET > 0
    MICROPHYSICS_UNUSED const std::vector<std::string> short_aux_names_cxx = {
       @@SHORT_AUX_NAMES@@
    };

    MICROPHYSICS_UNUSED const std::vector<std::string> aux_names_cxx = {
       @@AUX_NAMES@@
    };
#endif
}

#if NAUX_NET > 0
namespace AuxZero {
   enum AuxIndices {
     @@AUXZERO_ENUM@@
   };
}
#endif

namespace Species {
   enum NetworkSpecies {
     @@SPECIES_ENUM@@
   };
}

namespace NetworkProperties {
   AMREX_GPU_HOST_DEVICE AMREX_INLINE constexpr amrex::Real aion (int spec)
   {
       using namespace Species;

       amrex::Real a = -1.0;

       // NOLINTBEGIN(bugprone-branch-clone)
       switch (spec) {  // NOLINT(bugprone-switch-missing-default-case)
           @@AION_CONSTEXPR@@

       }
       // NOLINTEND(bugprone-branch-clone)

       return a;
   }

   AMREX_GPU_HOST_DEVICE AMREX_INLINE constexpr amrex::Real zion (int spec)
   {
       using namespace Species;

       amrex::Real z = -1.0;

       // NOLINTBEGIN(bugprone-branch-clone)
       switch (spec) {  // NOLINT(bugprone-switch-missing-default-case)
           @@ZION_CONSTEXPR@@

       }
       // NOLINTEND(bugprone-branch-clone)

       return z;
   }

}
#endif
