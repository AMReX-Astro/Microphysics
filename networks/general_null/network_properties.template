! An automatically generated file of network properties.  This provides the properties
! of a set of non-reacting species.
!
! nspec            -- the number of species
! naux             -- the number of auxiliary variables
!
! aion             -- atomic number
! zion             -- proton number
! aion_inv         -- 1/atomic number
!
! spec_names       -- the name of the isotope
! short_spec_names -- an abbreviated form of the species name
!
! aux_names        -- the name of the auxiliary variable
! short_aux_names  -- an abbreviated form of the auxiliary variable


module network_properties

  use amrex_fort_module, only: rt => amrex_real

  implicit none

  integer, parameter :: nspec = @@NSPEC@@
  integer, parameter :: naux =  @@NAUX@@

  character (len=16), save :: spec_names(nspec)
  character (len= 5), save :: short_spec_names(nspec)
  character (len=16), save :: aux_names(naux)
  character (len= 5), save :: short_aux_names(naux)

  real(rt), allocatable, save :: aion(:), aion_inv(:), zion(:), nion(:)

contains

  subroutine network_properties_init

    @@SPEC_NAMES@@

    @@SHORT_SPEC_NAMES@@

    allocate(aion(nspec))
    allocate(aion_inv(nspec))
    allocate(zion(nspec))
    allocate(nion(nspec))

    @@AION@@

    @@ZION@@

    @@AION_INV@@

    ! Set the number of neutrons
    nion(:) = aion(:) - zion(:)


    @@AUX_NAMES@@

    @@SHORT_AUX_NAMES@@

  end subroutine network_properties_init



  subroutine network_properties_finalize

    implicit none

    if (allocated(aion)) then
       deallocate(aion)
    end if

    if (allocated(aion_inv)) then
       deallocate(aion_inv)
    end if

    if (allocated(zion)) then
       deallocate(zion)
    end if

    if (allocated(nion)) then
       deallocate(nion)
    end if

  end subroutine network_properties_finalize

end module network_properties
