! This module stores the runtime parameters.  The probin_init() routine is
! used to initialize the runtime parameters

module extern_probin_module

  use amrex_fort_module, only: rt => amrex_real

  implicit none

  @@declarations@@


end module extern_probin_module

#ifdef COMPILE_WITH_F2PY
subroutine runtime_init(probin)

  use extern_probin_module

  implicit none

#else
subroutine runtime_init(name,namlen)

  use extern_probin_module

  implicit none

  integer :: namlen
  integer :: name(namlen)
#endif

  integer :: un, i, status

  integer, parameter :: maxlen = 256
  character (len=maxlen) :: probin


  @@namelist@@

  @@allocations@@

  @@defaults@@

#ifndef COMPILE_WITH_F2PY
  ! create the filename
#ifndef AMREX_USE_CUDA
  if (namlen > maxlen) then
     print *, 'probin file name too long'
     stop
  endif
#endif

  do i = 1, namlen
     probin(i:i) = char(name(i))
  end do


  ! read in the namelist
  open (newunit=un, file=probin(1:namlen), form='formatted', status='old')
#else
  ! read in the namelist
  open (newunit=un, file=trim(probin), form='formatted', status='old')
#endif
  read (unit=un, nml=extern, iostat=status)

  if (status < 0) then
     ! the namelist does not exist, so we just go with the defaults
     continue

  else if (status > 0) then
     ! some problem in the namelist
#ifndef AMREX_USE_CUDA 
     print *, 'ERROR: problem in the extern namelist'
#endif
     stop
  endif

  close (unit=un)

end subroutine runtime_init

subroutine update_fortran_extern_after_cxx() bind(C, name="update_fortran_extern_after_cxx")

  use extern_probin_module
  use amrex_parmparse_module, only: amrex_parmparse_build, amrex_parmparse_destroy, amrex_parmparse
  use amrex_fort_module, only : rt => amrex_real

  implicit none

  type (amrex_parmparse) :: pp
  character (len=:), allocatable :: dummy_string_param

  @@fortran_parmparse_overrides@@

end subroutine update_fortran_extern_after_cxx

subroutine runtime_pretty_print(name, namlen) bind(C, name="runtime_pretty_print")

  use amrex_constants_module
  use extern_probin_module

  implicit none

  integer :: unit, i

  integer :: namlen
  integer :: name(namlen)

  logical :: ltest

  integer, parameter :: maxlen = 256
  character (len=maxlen) :: probin

  if (namlen > maxlen) then
     print *, "probin file name too long"
  endif

  do i = 1, namlen
     probin(i:i) = char(name(i))
  end do

  ! open the job info file in Fortran
  open(newunit=unit, file=probin(1:namlen), status="old", position="append")

  @@printing@@

  close(unit=unit)

end subroutine runtime_pretty_print

module extern_f90_to_cxx

  use iso_c_binding
  use extern_probin_module
  use amrex_fort_module, only: rt => amrex_real

  implicit none

contains

  @@cxx_gets@@

end module extern_f90_to_cxx
