# NOTE:
# Run this file from the top-level Microphysics directory

import os
import re

esum_template = """
  AMREX_DEVICE function esum@NUM@(array) result(esum)

    !$acc routine seq

    use amrex_error_module, only: amrex_error
    use amrex_fort_module, only : rt => amrex_real

    implicit none

    real(rt), intent(in) :: array(:)
    real(rt) :: esum

    integer :: i, j, k, km

    ! Note that for performance reasons we are not
    ! initializing the unused values in this array.

    real(rt) :: partials(0:@NUM_MINUS_ONE@)

    ! These temporary variables need to be explicitly
    ! constructed for the algorithm to make sense. To
    ! avoid the compiler optimizing them away, in
    ! particular the statement lo = y - (hi - x), we
    ! will use the F2003 volatile keyword, which
    ! does the same thing as the keyword in C.
    real(rt), volatile :: x, y, z, hi, lo

    !$gpu

    ! j keeps track of how many entries in partials are actually used.
    ! The algorithm we model this off of, written in Python, simply
    ! deletes array entries at the end of every outer loop iteration.
    ! The Fortran equivalent to this might be to just zero them out,
    ! but this results in a huge performance hit given how often
    ! this routine is called during in a burn. So we opt instead to
    ! just track how many of the values are meaningful, which j does
    ! automatically, and ignore any data in the remaining slots.

    j = 0

    ! The first partial is just the first term.
    partials(j) = array(1)

    do i = 2, @NUM@

       km = j
       j = 0

       x = array(i)

       do k = 0, km
          y = partials(k)

          if (abs(x) < abs(y)) then
             ! Swap x, y
             z = y
             y = x
             x = z
          endif

          hi = x + y
          lo = y - (hi - x)

          if (lo .ne. 0.0_rt) then
             partials(j) = lo
             j = j + 1
          endif

          x = hi

       enddo

       partials(j) = x

    enddo

    esum = sum(partials(0:j))

  end function esum@NUM@

"""

module_start = """
! NOTE: THIS FILE IS AUTOMATICALLY GENERATED
! DO NOT EDIT BY HAND

! Re-run esum.py from the top-level Microphysics directory
! to update this file
module esum_module

  implicit none

  public

contains
"""

module_end = """
end module esum_module
"""

with open("util/esum_module.F90", "w") as ef:

    ef.write(module_start)

    for num in range(3, 31):
        ef.write(esum_template.replace("@NUM@", str(num)).replace("@NUM_MINUS_ONE@", str(num-1)))

    ef.write(module_end)

