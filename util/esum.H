
// NOTE: THIS FILE IS AUTOMATICALLY GENERATED
// DO NOT EDIT BY HAND

// Re-run esum_cxx.py to update this file

// Fortran 2003 implementation of the msum routine
// provided by Raymond Hettinger:
// https://code.activestate.com/recipes/393090/
// This routine calculates the sum of N numbers
// exactly to within double precision arithmetic.
// Ported to C++.

// For perfomance reasons we implement a specialized
// version of esum for each possible value of N >= 3.

// Also for performance reasons, we explicitly unroll
// the outer loop of the msum method into groups of 3
// (and a group of 4 at the end, for even N). This seems
// to be significantly faster, but should still be exact
// to within the arithmetic because each one of the
// individual msums is (although this does not necessarily
// mean that the result is the same).

// This routine is called "esum" for generality
// because in principle we could add implementations
// other than msum that do exact arithmetic, without
// changing the interface as seen in the networks.

#ifndef _esum_H_
#define _esum_H_

#include <AMReX_REAL.H>
#include <AMReX_Array.H>
#include <ArrayUtilities.H>

using namespace amrex;


template<class T>
AMREX_GPU_HOST_DEVICE AMREX_INLINE
Real esum3(T const& array)
{
    // return value
    Real esum;

    // Indices for tracking the partials array.
    // j keeps track of how many entries in partials are actually used.
    // The algorithm we model this off of, written in Python, simply
    // deletes array entries at the end of every outer loop iteration.
    // The Fortran equivalent to this might be to just zero them out,
    // but this results in a huge performance hit given how often
    // this routine is called during in a burn. So we opt instead to
    // just track how many of the values are meaningful, which j does
    // automatically, and ignore any data in the remaining slots.
    int i, j, k, km;

    // Note that for performance reasons we are not
    // initializing any unused values in this array.
    Array1D<Real, 0, 4> partials;

    // Some temporary variables for holding intermediate data.
    Real x, y, z;

    // These temporary variables need to be explicitly
    // constructed for the algorithm to make sense.
    // If the compiler optimizes away the statement
    // lo = y - (hi - x), the approach fails. This could
    // be avoided with the volatile keyword, but at the
    // expense of forcing additional memory usage
    // which would slow down the calculation. Instead
    // we will rely on the compiler not to optimize
    // the statement away. This should be true for gcc
    // by default but is not necessarily true for all
    // compilers. In particular, Intel does not do this
    // by default, so you must use the -assume-protect-parens
    // flag for ifort.
    Real hi, lo;

    // The first partial is just the first term.
    esum = array(1);


    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+0);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);


    return esum;
}


template<class T>
AMREX_GPU_HOST_DEVICE AMREX_INLINE
Real esum4(T const& array)
{
    // return value
    Real esum;

    // Indices for tracking the partials array.
    // j keeps track of how many entries in partials are actually used.
    // The algorithm we model this off of, written in Python, simply
    // deletes array entries at the end of every outer loop iteration.
    // The Fortran equivalent to this might be to just zero them out,
    // but this results in a huge performance hit given how often
    // this routine is called during in a burn. So we opt instead to
    // just track how many of the values are meaningful, which j does
    // automatically, and ignore any data in the remaining slots.
    int i, j, k, km;

    // Note that for performance reasons we are not
    // initializing any unused values in this array.
    Array1D<Real, 0, 4> partials;

    // Some temporary variables for holding intermediate data.
    Real x, y, z;

    // These temporary variables need to be explicitly
    // constructed for the algorithm to make sense.
    // If the compiler optimizes away the statement
    // lo = y - (hi - x), the approach fails. This could
    // be avoided with the volatile keyword, but at the
    // expense of forcing additional memory usage
    // which would slow down the calculation. Instead
    // we will rely on the compiler not to optimize
    // the statement away. This should be true for gcc
    // by default but is not necessarily true for all
    // compilers. In particular, Intel does not do this
    // by default, so you must use the -assume-protect-parens
    // flag for ifort.
    Real hi, lo;

    // The first partial is just the first term.
    esum = array(1);


    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 4; ++i) {

       km = j;
       j = 0;

       x = array(i+0);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);


    return esum;
}


template<class T>
AMREX_GPU_HOST_DEVICE AMREX_INLINE
Real esum5(T const& array)
{
    // return value
    Real esum;

    // Indices for tracking the partials array.
    // j keeps track of how many entries in partials are actually used.
    // The algorithm we model this off of, written in Python, simply
    // deletes array entries at the end of every outer loop iteration.
    // The Fortran equivalent to this might be to just zero them out,
    // but this results in a huge performance hit given how often
    // this routine is called during in a burn. So we opt instead to
    // just track how many of the values are meaningful, which j does
    // automatically, and ignore any data in the remaining slots.
    int i, j, k, km;

    // Note that for performance reasons we are not
    // initializing any unused values in this array.
    Array1D<Real, 0, 4> partials;

    // Some temporary variables for holding intermediate data.
    Real x, y, z;

    // These temporary variables need to be explicitly
    // constructed for the algorithm to make sense.
    // If the compiler optimizes away the statement
    // lo = y - (hi - x), the approach fails. This could
    // be avoided with the volatile keyword, but at the
    // expense of forcing additional memory usage
    // which would slow down the calculation. Instead
    // we will rely on the compiler not to optimize
    // the statement away. This should be true for gcc
    // by default but is not necessarily true for all
    // compilers. In particular, Intel does not do this
    // by default, so you must use the -assume-protect-parens
    // flag for ifort.
    Real hi, lo;

    // The first partial is just the first term.
    esum = array(1);


    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+0);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+2);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);


    return esum;
}


template<class T>
AMREX_GPU_HOST_DEVICE AMREX_INLINE
Real esum6(T const& array)
{
    // return value
    Real esum;

    // Indices for tracking the partials array.
    // j keeps track of how many entries in partials are actually used.
    // The algorithm we model this off of, written in Python, simply
    // deletes array entries at the end of every outer loop iteration.
    // The Fortran equivalent to this might be to just zero them out,
    // but this results in a huge performance hit given how often
    // this routine is called during in a burn. So we opt instead to
    // just track how many of the values are meaningful, which j does
    // automatically, and ignore any data in the remaining slots.
    int i, j, k, km;

    // Note that for performance reasons we are not
    // initializing any unused values in this array.
    Array1D<Real, 0, 4> partials;

    // Some temporary variables for holding intermediate data.
    Real x, y, z;

    // These temporary variables need to be explicitly
    // constructed for the algorithm to make sense.
    // If the compiler optimizes away the statement
    // lo = y - (hi - x), the approach fails. This could
    // be avoided with the volatile keyword, but at the
    // expense of forcing additional memory usage
    // which would slow down the calculation. Instead
    // we will rely on the compiler not to optimize
    // the statement away. This should be true for gcc
    // by default but is not necessarily true for all
    // compilers. In particular, Intel does not do this
    // by default, so you must use the -assume-protect-parens
    // flag for ifort.
    Real hi, lo;

    // The first partial is just the first term.
    esum = array(1);


    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+0);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 4; ++i) {

       km = j;
       j = 0;

       x = array(i+2);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);


    return esum;
}


template<class T>
AMREX_GPU_HOST_DEVICE AMREX_INLINE
Real esum7(T const& array)
{
    // return value
    Real esum;

    // Indices for tracking the partials array.
    // j keeps track of how many entries in partials are actually used.
    // The algorithm we model this off of, written in Python, simply
    // deletes array entries at the end of every outer loop iteration.
    // The Fortran equivalent to this might be to just zero them out,
    // but this results in a huge performance hit given how often
    // this routine is called during in a burn. So we opt instead to
    // just track how many of the values are meaningful, which j does
    // automatically, and ignore any data in the remaining slots.
    int i, j, k, km;

    // Note that for performance reasons we are not
    // initializing any unused values in this array.
    Array1D<Real, 0, 4> partials;

    // Some temporary variables for holding intermediate data.
    Real x, y, z;

    // These temporary variables need to be explicitly
    // constructed for the algorithm to make sense.
    // If the compiler optimizes away the statement
    // lo = y - (hi - x), the approach fails. This could
    // be avoided with the volatile keyword, but at the
    // expense of forcing additional memory usage
    // which would slow down the calculation. Instead
    // we will rely on the compiler not to optimize
    // the statement away. This should be true for gcc
    // by default but is not necessarily true for all
    // compilers. In particular, Intel does not do this
    // by default, so you must use the -assume-protect-parens
    // flag for ifort.
    Real hi, lo;

    // The first partial is just the first term.
    esum = array(1);


    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+0);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+2);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+4);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);


    return esum;
}


template<class T>
AMREX_GPU_HOST_DEVICE AMREX_INLINE
Real esum8(T const& array)
{
    // return value
    Real esum;

    // Indices for tracking the partials array.
    // j keeps track of how many entries in partials are actually used.
    // The algorithm we model this off of, written in Python, simply
    // deletes array entries at the end of every outer loop iteration.
    // The Fortran equivalent to this might be to just zero them out,
    // but this results in a huge performance hit given how often
    // this routine is called during in a burn. So we opt instead to
    // just track how many of the values are meaningful, which j does
    // automatically, and ignore any data in the remaining slots.
    int i, j, k, km;

    // Note that for performance reasons we are not
    // initializing any unused values in this array.
    Array1D<Real, 0, 4> partials;

    // Some temporary variables for holding intermediate data.
    Real x, y, z;

    // These temporary variables need to be explicitly
    // constructed for the algorithm to make sense.
    // If the compiler optimizes away the statement
    // lo = y - (hi - x), the approach fails. This could
    // be avoided with the volatile keyword, but at the
    // expense of forcing additional memory usage
    // which would slow down the calculation. Instead
    // we will rely on the compiler not to optimize
    // the statement away. This should be true for gcc
    // by default but is not necessarily true for all
    // compilers. In particular, Intel does not do this
    // by default, so you must use the -assume-protect-parens
    // flag for ifort.
    Real hi, lo;

    // The first partial is just the first term.
    esum = array(1);


    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+0);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+2);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 4; ++i) {

       km = j;
       j = 0;

       x = array(i+4);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);


    return esum;
}


template<class T>
AMREX_GPU_HOST_DEVICE AMREX_INLINE
Real esum9(T const& array)
{
    // return value
    Real esum;

    // Indices for tracking the partials array.
    // j keeps track of how many entries in partials are actually used.
    // The algorithm we model this off of, written in Python, simply
    // deletes array entries at the end of every outer loop iteration.
    // The Fortran equivalent to this might be to just zero them out,
    // but this results in a huge performance hit given how often
    // this routine is called during in a burn. So we opt instead to
    // just track how many of the values are meaningful, which j does
    // automatically, and ignore any data in the remaining slots.
    int i, j, k, km;

    // Note that for performance reasons we are not
    // initializing any unused values in this array.
    Array1D<Real, 0, 4> partials;

    // Some temporary variables for holding intermediate data.
    Real x, y, z;

    // These temporary variables need to be explicitly
    // constructed for the algorithm to make sense.
    // If the compiler optimizes away the statement
    // lo = y - (hi - x), the approach fails. This could
    // be avoided with the volatile keyword, but at the
    // expense of forcing additional memory usage
    // which would slow down the calculation. Instead
    // we will rely on the compiler not to optimize
    // the statement away. This should be true for gcc
    // by default but is not necessarily true for all
    // compilers. In particular, Intel does not do this
    // by default, so you must use the -assume-protect-parens
    // flag for ifort.
    Real hi, lo;

    // The first partial is just the first term.
    esum = array(1);


    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+0);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+2);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+4);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+6);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);


    return esum;
}


template<class T>
AMREX_GPU_HOST_DEVICE AMREX_INLINE
Real esum10(T const& array)
{
    // return value
    Real esum;

    // Indices for tracking the partials array.
    // j keeps track of how many entries in partials are actually used.
    // The algorithm we model this off of, written in Python, simply
    // deletes array entries at the end of every outer loop iteration.
    // The Fortran equivalent to this might be to just zero them out,
    // but this results in a huge performance hit given how often
    // this routine is called during in a burn. So we opt instead to
    // just track how many of the values are meaningful, which j does
    // automatically, and ignore any data in the remaining slots.
    int i, j, k, km;

    // Note that for performance reasons we are not
    // initializing any unused values in this array.
    Array1D<Real, 0, 4> partials;

    // Some temporary variables for holding intermediate data.
    Real x, y, z;

    // These temporary variables need to be explicitly
    // constructed for the algorithm to make sense.
    // If the compiler optimizes away the statement
    // lo = y - (hi - x), the approach fails. This could
    // be avoided with the volatile keyword, but at the
    // expense of forcing additional memory usage
    // which would slow down the calculation. Instead
    // we will rely on the compiler not to optimize
    // the statement away. This should be true for gcc
    // by default but is not necessarily true for all
    // compilers. In particular, Intel does not do this
    // by default, so you must use the -assume-protect-parens
    // flag for ifort.
    Real hi, lo;

    // The first partial is just the first term.
    esum = array(1);


    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+0);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+2);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+4);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 4; ++i) {

       km = j;
       j = 0;

       x = array(i+6);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);


    return esum;
}


template<class T>
AMREX_GPU_HOST_DEVICE AMREX_INLINE
Real esum11(T const& array)
{
    // return value
    Real esum;

    // Indices for tracking the partials array.
    // j keeps track of how many entries in partials are actually used.
    // The algorithm we model this off of, written in Python, simply
    // deletes array entries at the end of every outer loop iteration.
    // The Fortran equivalent to this might be to just zero them out,
    // but this results in a huge performance hit given how often
    // this routine is called during in a burn. So we opt instead to
    // just track how many of the values are meaningful, which j does
    // automatically, and ignore any data in the remaining slots.
    int i, j, k, km;

    // Note that for performance reasons we are not
    // initializing any unused values in this array.
    Array1D<Real, 0, 4> partials;

    // Some temporary variables for holding intermediate data.
    Real x, y, z;

    // These temporary variables need to be explicitly
    // constructed for the algorithm to make sense.
    // If the compiler optimizes away the statement
    // lo = y - (hi - x), the approach fails. This could
    // be avoided with the volatile keyword, but at the
    // expense of forcing additional memory usage
    // which would slow down the calculation. Instead
    // we will rely on the compiler not to optimize
    // the statement away. This should be true for gcc
    // by default but is not necessarily true for all
    // compilers. In particular, Intel does not do this
    // by default, so you must use the -assume-protect-parens
    // flag for ifort.
    Real hi, lo;

    // The first partial is just the first term.
    esum = array(1);


    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+0);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+2);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+4);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+6);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+8);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);


    return esum;
}


template<class T>
AMREX_GPU_HOST_DEVICE AMREX_INLINE
Real esum12(T const& array)
{
    // return value
    Real esum;

    // Indices for tracking the partials array.
    // j keeps track of how many entries in partials are actually used.
    // The algorithm we model this off of, written in Python, simply
    // deletes array entries at the end of every outer loop iteration.
    // The Fortran equivalent to this might be to just zero them out,
    // but this results in a huge performance hit given how often
    // this routine is called during in a burn. So we opt instead to
    // just track how many of the values are meaningful, which j does
    // automatically, and ignore any data in the remaining slots.
    int i, j, k, km;

    // Note that for performance reasons we are not
    // initializing any unused values in this array.
    Array1D<Real, 0, 4> partials;

    // Some temporary variables for holding intermediate data.
    Real x, y, z;

    // These temporary variables need to be explicitly
    // constructed for the algorithm to make sense.
    // If the compiler optimizes away the statement
    // lo = y - (hi - x), the approach fails. This could
    // be avoided with the volatile keyword, but at the
    // expense of forcing additional memory usage
    // which would slow down the calculation. Instead
    // we will rely on the compiler not to optimize
    // the statement away. This should be true for gcc
    // by default but is not necessarily true for all
    // compilers. In particular, Intel does not do this
    // by default, so you must use the -assume-protect-parens
    // flag for ifort.
    Real hi, lo;

    // The first partial is just the first term.
    esum = array(1);


    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+0);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+2);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+4);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+6);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 4; ++i) {

       km = j;
       j = 0;

       x = array(i+8);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);


    return esum;
}


template<class T>
AMREX_GPU_HOST_DEVICE AMREX_INLINE
Real esum13(T const& array)
{
    // return value
    Real esum;

    // Indices for tracking the partials array.
    // j keeps track of how many entries in partials are actually used.
    // The algorithm we model this off of, written in Python, simply
    // deletes array entries at the end of every outer loop iteration.
    // The Fortran equivalent to this might be to just zero them out,
    // but this results in a huge performance hit given how often
    // this routine is called during in a burn. So we opt instead to
    // just track how many of the values are meaningful, which j does
    // automatically, and ignore any data in the remaining slots.
    int i, j, k, km;

    // Note that for performance reasons we are not
    // initializing any unused values in this array.
    Array1D<Real, 0, 4> partials;

    // Some temporary variables for holding intermediate data.
    Real x, y, z;

    // These temporary variables need to be explicitly
    // constructed for the algorithm to make sense.
    // If the compiler optimizes away the statement
    // lo = y - (hi - x), the approach fails. This could
    // be avoided with the volatile keyword, but at the
    // expense of forcing additional memory usage
    // which would slow down the calculation. Instead
    // we will rely on the compiler not to optimize
    // the statement away. This should be true for gcc
    // by default but is not necessarily true for all
    // compilers. In particular, Intel does not do this
    // by default, so you must use the -assume-protect-parens
    // flag for ifort.
    Real hi, lo;

    // The first partial is just the first term.
    esum = array(1);


    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+0);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+2);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+4);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+6);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+8);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+10);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);


    return esum;
}


template<class T>
AMREX_GPU_HOST_DEVICE AMREX_INLINE
Real esum14(T const& array)
{
    // return value
    Real esum;

    // Indices for tracking the partials array.
    // j keeps track of how many entries in partials are actually used.
    // The algorithm we model this off of, written in Python, simply
    // deletes array entries at the end of every outer loop iteration.
    // The Fortran equivalent to this might be to just zero them out,
    // but this results in a huge performance hit given how often
    // this routine is called during in a burn. So we opt instead to
    // just track how many of the values are meaningful, which j does
    // automatically, and ignore any data in the remaining slots.
    int i, j, k, km;

    // Note that for performance reasons we are not
    // initializing any unused values in this array.
    Array1D<Real, 0, 4> partials;

    // Some temporary variables for holding intermediate data.
    Real x, y, z;

    // These temporary variables need to be explicitly
    // constructed for the algorithm to make sense.
    // If the compiler optimizes away the statement
    // lo = y - (hi - x), the approach fails. This could
    // be avoided with the volatile keyword, but at the
    // expense of forcing additional memory usage
    // which would slow down the calculation. Instead
    // we will rely on the compiler not to optimize
    // the statement away. This should be true for gcc
    // by default but is not necessarily true for all
    // compilers. In particular, Intel does not do this
    // by default, so you must use the -assume-protect-parens
    // flag for ifort.
    Real hi, lo;

    // The first partial is just the first term.
    esum = array(1);


    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+0);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+2);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+4);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+6);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+8);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 4; ++i) {

       km = j;
       j = 0;

       x = array(i+10);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);


    return esum;
}


template<class T>
AMREX_GPU_HOST_DEVICE AMREX_INLINE
Real esum15(T const& array)
{
    // return value
    Real esum;

    // Indices for tracking the partials array.
    // j keeps track of how many entries in partials are actually used.
    // The algorithm we model this off of, written in Python, simply
    // deletes array entries at the end of every outer loop iteration.
    // The Fortran equivalent to this might be to just zero them out,
    // but this results in a huge performance hit given how often
    // this routine is called during in a burn. So we opt instead to
    // just track how many of the values are meaningful, which j does
    // automatically, and ignore any data in the remaining slots.
    int i, j, k, km;

    // Note that for performance reasons we are not
    // initializing any unused values in this array.
    Array1D<Real, 0, 4> partials;

    // Some temporary variables for holding intermediate data.
    Real x, y, z;

    // These temporary variables need to be explicitly
    // constructed for the algorithm to make sense.
    // If the compiler optimizes away the statement
    // lo = y - (hi - x), the approach fails. This could
    // be avoided with the volatile keyword, but at the
    // expense of forcing additional memory usage
    // which would slow down the calculation. Instead
    // we will rely on the compiler not to optimize
    // the statement away. This should be true for gcc
    // by default but is not necessarily true for all
    // compilers. In particular, Intel does not do this
    // by default, so you must use the -assume-protect-parens
    // flag for ifort.
    Real hi, lo;

    // The first partial is just the first term.
    esum = array(1);


    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+0);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+2);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+4);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+6);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+8);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+10);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+12);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);


    return esum;
}


template<class T>
AMREX_GPU_HOST_DEVICE AMREX_INLINE
Real esum16(T const& array)
{
    // return value
    Real esum;

    // Indices for tracking the partials array.
    // j keeps track of how many entries in partials are actually used.
    // The algorithm we model this off of, written in Python, simply
    // deletes array entries at the end of every outer loop iteration.
    // The Fortran equivalent to this might be to just zero them out,
    // but this results in a huge performance hit given how often
    // this routine is called during in a burn. So we opt instead to
    // just track how many of the values are meaningful, which j does
    // automatically, and ignore any data in the remaining slots.
    int i, j, k, km;

    // Note that for performance reasons we are not
    // initializing any unused values in this array.
    Array1D<Real, 0, 4> partials;

    // Some temporary variables for holding intermediate data.
    Real x, y, z;

    // These temporary variables need to be explicitly
    // constructed for the algorithm to make sense.
    // If the compiler optimizes away the statement
    // lo = y - (hi - x), the approach fails. This could
    // be avoided with the volatile keyword, but at the
    // expense of forcing additional memory usage
    // which would slow down the calculation. Instead
    // we will rely on the compiler not to optimize
    // the statement away. This should be true for gcc
    // by default but is not necessarily true for all
    // compilers. In particular, Intel does not do this
    // by default, so you must use the -assume-protect-parens
    // flag for ifort.
    Real hi, lo;

    // The first partial is just the first term.
    esum = array(1);


    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+0);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+2);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+4);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+6);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+8);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+10);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 4; ++i) {

       km = j;
       j = 0;

       x = array(i+12);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);


    return esum;
}


template<class T>
AMREX_GPU_HOST_DEVICE AMREX_INLINE
Real esum17(T const& array)
{
    // return value
    Real esum;

    // Indices for tracking the partials array.
    // j keeps track of how many entries in partials are actually used.
    // The algorithm we model this off of, written in Python, simply
    // deletes array entries at the end of every outer loop iteration.
    // The Fortran equivalent to this might be to just zero them out,
    // but this results in a huge performance hit given how often
    // this routine is called during in a burn. So we opt instead to
    // just track how many of the values are meaningful, which j does
    // automatically, and ignore any data in the remaining slots.
    int i, j, k, km;

    // Note that for performance reasons we are not
    // initializing any unused values in this array.
    Array1D<Real, 0, 4> partials;

    // Some temporary variables for holding intermediate data.
    Real x, y, z;

    // These temporary variables need to be explicitly
    // constructed for the algorithm to make sense.
    // If the compiler optimizes away the statement
    // lo = y - (hi - x), the approach fails. This could
    // be avoided with the volatile keyword, but at the
    // expense of forcing additional memory usage
    // which would slow down the calculation. Instead
    // we will rely on the compiler not to optimize
    // the statement away. This should be true for gcc
    // by default but is not necessarily true for all
    // compilers. In particular, Intel does not do this
    // by default, so you must use the -assume-protect-parens
    // flag for ifort.
    Real hi, lo;

    // The first partial is just the first term.
    esum = array(1);


    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+0);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+2);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+4);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+6);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+8);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+10);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+12);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+14);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);


    return esum;
}


template<class T>
AMREX_GPU_HOST_DEVICE AMREX_INLINE
Real esum18(T const& array)
{
    // return value
    Real esum;

    // Indices for tracking the partials array.
    // j keeps track of how many entries in partials are actually used.
    // The algorithm we model this off of, written in Python, simply
    // deletes array entries at the end of every outer loop iteration.
    // The Fortran equivalent to this might be to just zero them out,
    // but this results in a huge performance hit given how often
    // this routine is called during in a burn. So we opt instead to
    // just track how many of the values are meaningful, which j does
    // automatically, and ignore any data in the remaining slots.
    int i, j, k, km;

    // Note that for performance reasons we are not
    // initializing any unused values in this array.
    Array1D<Real, 0, 4> partials;

    // Some temporary variables for holding intermediate data.
    Real x, y, z;

    // These temporary variables need to be explicitly
    // constructed for the algorithm to make sense.
    // If the compiler optimizes away the statement
    // lo = y - (hi - x), the approach fails. This could
    // be avoided with the volatile keyword, but at the
    // expense of forcing additional memory usage
    // which would slow down the calculation. Instead
    // we will rely on the compiler not to optimize
    // the statement away. This should be true for gcc
    // by default but is not necessarily true for all
    // compilers. In particular, Intel does not do this
    // by default, so you must use the -assume-protect-parens
    // flag for ifort.
    Real hi, lo;

    // The first partial is just the first term.
    esum = array(1);


    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+0);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+2);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+4);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+6);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+8);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+10);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+12);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 4; ++i) {

       km = j;
       j = 0;

       x = array(i+14);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);


    return esum;
}


template<class T>
AMREX_GPU_HOST_DEVICE AMREX_INLINE
Real esum19(T const& array)
{
    // return value
    Real esum;

    // Indices for tracking the partials array.
    // j keeps track of how many entries in partials are actually used.
    // The algorithm we model this off of, written in Python, simply
    // deletes array entries at the end of every outer loop iteration.
    // The Fortran equivalent to this might be to just zero them out,
    // but this results in a huge performance hit given how often
    // this routine is called during in a burn. So we opt instead to
    // just track how many of the values are meaningful, which j does
    // automatically, and ignore any data in the remaining slots.
    int i, j, k, km;

    // Note that for performance reasons we are not
    // initializing any unused values in this array.
    Array1D<Real, 0, 4> partials;

    // Some temporary variables for holding intermediate data.
    Real x, y, z;

    // These temporary variables need to be explicitly
    // constructed for the algorithm to make sense.
    // If the compiler optimizes away the statement
    // lo = y - (hi - x), the approach fails. This could
    // be avoided with the volatile keyword, but at the
    // expense of forcing additional memory usage
    // which would slow down the calculation. Instead
    // we will rely on the compiler not to optimize
    // the statement away. This should be true for gcc
    // by default but is not necessarily true for all
    // compilers. In particular, Intel does not do this
    // by default, so you must use the -assume-protect-parens
    // flag for ifort.
    Real hi, lo;

    // The first partial is just the first term.
    esum = array(1);


    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+0);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+2);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+4);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+6);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+8);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+10);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+12);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+14);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+16);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);


    return esum;
}


template<class T>
AMREX_GPU_HOST_DEVICE AMREX_INLINE
Real esum20(T const& array)
{
    // return value
    Real esum;

    // Indices for tracking the partials array.
    // j keeps track of how many entries in partials are actually used.
    // The algorithm we model this off of, written in Python, simply
    // deletes array entries at the end of every outer loop iteration.
    // The Fortran equivalent to this might be to just zero them out,
    // but this results in a huge performance hit given how often
    // this routine is called during in a burn. So we opt instead to
    // just track how many of the values are meaningful, which j does
    // automatically, and ignore any data in the remaining slots.
    int i, j, k, km;

    // Note that for performance reasons we are not
    // initializing any unused values in this array.
    Array1D<Real, 0, 4> partials;

    // Some temporary variables for holding intermediate data.
    Real x, y, z;

    // These temporary variables need to be explicitly
    // constructed for the algorithm to make sense.
    // If the compiler optimizes away the statement
    // lo = y - (hi - x), the approach fails. This could
    // be avoided with the volatile keyword, but at the
    // expense of forcing additional memory usage
    // which would slow down the calculation. Instead
    // we will rely on the compiler not to optimize
    // the statement away. This should be true for gcc
    // by default but is not necessarily true for all
    // compilers. In particular, Intel does not do this
    // by default, so you must use the -assume-protect-parens
    // flag for ifort.
    Real hi, lo;

    // The first partial is just the first term.
    esum = array(1);


    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+0);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+2);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+4);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+6);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+8);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+10);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+12);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+14);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 4; ++i) {

       km = j;
       j = 0;

       x = array(i+16);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);


    return esum;
}


template<class T>
AMREX_GPU_HOST_DEVICE AMREX_INLINE
Real esum21(T const& array)
{
    // return value
    Real esum;

    // Indices for tracking the partials array.
    // j keeps track of how many entries in partials are actually used.
    // The algorithm we model this off of, written in Python, simply
    // deletes array entries at the end of every outer loop iteration.
    // The Fortran equivalent to this might be to just zero them out,
    // but this results in a huge performance hit given how often
    // this routine is called during in a burn. So we opt instead to
    // just track how many of the values are meaningful, which j does
    // automatically, and ignore any data in the remaining slots.
    int i, j, k, km;

    // Note that for performance reasons we are not
    // initializing any unused values in this array.
    Array1D<Real, 0, 4> partials;

    // Some temporary variables for holding intermediate data.
    Real x, y, z;

    // These temporary variables need to be explicitly
    // constructed for the algorithm to make sense.
    // If the compiler optimizes away the statement
    // lo = y - (hi - x), the approach fails. This could
    // be avoided with the volatile keyword, but at the
    // expense of forcing additional memory usage
    // which would slow down the calculation. Instead
    // we will rely on the compiler not to optimize
    // the statement away. This should be true for gcc
    // by default but is not necessarily true for all
    // compilers. In particular, Intel does not do this
    // by default, so you must use the -assume-protect-parens
    // flag for ifort.
    Real hi, lo;

    // The first partial is just the first term.
    esum = array(1);


    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+0);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+2);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+4);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+6);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+8);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+10);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+12);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+14);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+16);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+18);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);


    return esum;
}


template<class T>
AMREX_GPU_HOST_DEVICE AMREX_INLINE
Real esum22(T const& array)
{
    // return value
    Real esum;

    // Indices for tracking the partials array.
    // j keeps track of how many entries in partials are actually used.
    // The algorithm we model this off of, written in Python, simply
    // deletes array entries at the end of every outer loop iteration.
    // The Fortran equivalent to this might be to just zero them out,
    // but this results in a huge performance hit given how often
    // this routine is called during in a burn. So we opt instead to
    // just track how many of the values are meaningful, which j does
    // automatically, and ignore any data in the remaining slots.
    int i, j, k, km;

    // Note that for performance reasons we are not
    // initializing any unused values in this array.
    Array1D<Real, 0, 4> partials;

    // Some temporary variables for holding intermediate data.
    Real x, y, z;

    // These temporary variables need to be explicitly
    // constructed for the algorithm to make sense.
    // If the compiler optimizes away the statement
    // lo = y - (hi - x), the approach fails. This could
    // be avoided with the volatile keyword, but at the
    // expense of forcing additional memory usage
    // which would slow down the calculation. Instead
    // we will rely on the compiler not to optimize
    // the statement away. This should be true for gcc
    // by default but is not necessarily true for all
    // compilers. In particular, Intel does not do this
    // by default, so you must use the -assume-protect-parens
    // flag for ifort.
    Real hi, lo;

    // The first partial is just the first term.
    esum = array(1);


    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+0);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+2);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+4);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+6);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+8);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+10);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+12);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+14);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+16);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 4; ++i) {

       km = j;
       j = 0;

       x = array(i+18);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);


    return esum;
}


template<class T>
AMREX_GPU_HOST_DEVICE AMREX_INLINE
Real esum23(T const& array)
{
    // return value
    Real esum;

    // Indices for tracking the partials array.
    // j keeps track of how many entries in partials are actually used.
    // The algorithm we model this off of, written in Python, simply
    // deletes array entries at the end of every outer loop iteration.
    // The Fortran equivalent to this might be to just zero them out,
    // but this results in a huge performance hit given how often
    // this routine is called during in a burn. So we opt instead to
    // just track how many of the values are meaningful, which j does
    // automatically, and ignore any data in the remaining slots.
    int i, j, k, km;

    // Note that for performance reasons we are not
    // initializing any unused values in this array.
    Array1D<Real, 0, 4> partials;

    // Some temporary variables for holding intermediate data.
    Real x, y, z;

    // These temporary variables need to be explicitly
    // constructed for the algorithm to make sense.
    // If the compiler optimizes away the statement
    // lo = y - (hi - x), the approach fails. This could
    // be avoided with the volatile keyword, but at the
    // expense of forcing additional memory usage
    // which would slow down the calculation. Instead
    // we will rely on the compiler not to optimize
    // the statement away. This should be true for gcc
    // by default but is not necessarily true for all
    // compilers. In particular, Intel does not do this
    // by default, so you must use the -assume-protect-parens
    // flag for ifort.
    Real hi, lo;

    // The first partial is just the first term.
    esum = array(1);


    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+0);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+2);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+4);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+6);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+8);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+10);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+12);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+14);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+16);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+18);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+20);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);


    return esum;
}


template<class T>
AMREX_GPU_HOST_DEVICE AMREX_INLINE
Real esum24(T const& array)
{
    // return value
    Real esum;

    // Indices for tracking the partials array.
    // j keeps track of how many entries in partials are actually used.
    // The algorithm we model this off of, written in Python, simply
    // deletes array entries at the end of every outer loop iteration.
    // The Fortran equivalent to this might be to just zero them out,
    // but this results in a huge performance hit given how often
    // this routine is called during in a burn. So we opt instead to
    // just track how many of the values are meaningful, which j does
    // automatically, and ignore any data in the remaining slots.
    int i, j, k, km;

    // Note that for performance reasons we are not
    // initializing any unused values in this array.
    Array1D<Real, 0, 4> partials;

    // Some temporary variables for holding intermediate data.
    Real x, y, z;

    // These temporary variables need to be explicitly
    // constructed for the algorithm to make sense.
    // If the compiler optimizes away the statement
    // lo = y - (hi - x), the approach fails. This could
    // be avoided with the volatile keyword, but at the
    // expense of forcing additional memory usage
    // which would slow down the calculation. Instead
    // we will rely on the compiler not to optimize
    // the statement away. This should be true for gcc
    // by default but is not necessarily true for all
    // compilers. In particular, Intel does not do this
    // by default, so you must use the -assume-protect-parens
    // flag for ifort.
    Real hi, lo;

    // The first partial is just the first term.
    esum = array(1);


    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+0);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+2);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+4);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+6);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+8);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+10);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+12);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+14);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+16);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+18);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 4; ++i) {

       km = j;
       j = 0;

       x = array(i+20);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);


    return esum;
}


template<class T>
AMREX_GPU_HOST_DEVICE AMREX_INLINE
Real esum25(T const& array)
{
    // return value
    Real esum;

    // Indices for tracking the partials array.
    // j keeps track of how many entries in partials are actually used.
    // The algorithm we model this off of, written in Python, simply
    // deletes array entries at the end of every outer loop iteration.
    // The Fortran equivalent to this might be to just zero them out,
    // but this results in a huge performance hit given how often
    // this routine is called during in a burn. So we opt instead to
    // just track how many of the values are meaningful, which j does
    // automatically, and ignore any data in the remaining slots.
    int i, j, k, km;

    // Note that for performance reasons we are not
    // initializing any unused values in this array.
    Array1D<Real, 0, 4> partials;

    // Some temporary variables for holding intermediate data.
    Real x, y, z;

    // These temporary variables need to be explicitly
    // constructed for the algorithm to make sense.
    // If the compiler optimizes away the statement
    // lo = y - (hi - x), the approach fails. This could
    // be avoided with the volatile keyword, but at the
    // expense of forcing additional memory usage
    // which would slow down the calculation. Instead
    // we will rely on the compiler not to optimize
    // the statement away. This should be true for gcc
    // by default but is not necessarily true for all
    // compilers. In particular, Intel does not do this
    // by default, so you must use the -assume-protect-parens
    // flag for ifort.
    Real hi, lo;

    // The first partial is just the first term.
    esum = array(1);


    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+0);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+2);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+4);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+6);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+8);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+10);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+12);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+14);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+16);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+18);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+20);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+22);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);


    return esum;
}


template<class T>
AMREX_GPU_HOST_DEVICE AMREX_INLINE
Real esum26(T const& array)
{
    // return value
    Real esum;

    // Indices for tracking the partials array.
    // j keeps track of how many entries in partials are actually used.
    // The algorithm we model this off of, written in Python, simply
    // deletes array entries at the end of every outer loop iteration.
    // The Fortran equivalent to this might be to just zero them out,
    // but this results in a huge performance hit given how often
    // this routine is called during in a burn. So we opt instead to
    // just track how many of the values are meaningful, which j does
    // automatically, and ignore any data in the remaining slots.
    int i, j, k, km;

    // Note that for performance reasons we are not
    // initializing any unused values in this array.
    Array1D<Real, 0, 4> partials;

    // Some temporary variables for holding intermediate data.
    Real x, y, z;

    // These temporary variables need to be explicitly
    // constructed for the algorithm to make sense.
    // If the compiler optimizes away the statement
    // lo = y - (hi - x), the approach fails. This could
    // be avoided with the volatile keyword, but at the
    // expense of forcing additional memory usage
    // which would slow down the calculation. Instead
    // we will rely on the compiler not to optimize
    // the statement away. This should be true for gcc
    // by default but is not necessarily true for all
    // compilers. In particular, Intel does not do this
    // by default, so you must use the -assume-protect-parens
    // flag for ifort.
    Real hi, lo;

    // The first partial is just the first term.
    esum = array(1);


    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+0);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+2);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+4);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+6);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+8);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+10);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+12);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+14);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+16);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+18);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+20);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 4; ++i) {

       km = j;
       j = 0;

       x = array(i+22);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);


    return esum;
}


template<class T>
AMREX_GPU_HOST_DEVICE AMREX_INLINE
Real esum27(T const& array)
{
    // return value
    Real esum;

    // Indices for tracking the partials array.
    // j keeps track of how many entries in partials are actually used.
    // The algorithm we model this off of, written in Python, simply
    // deletes array entries at the end of every outer loop iteration.
    // The Fortran equivalent to this might be to just zero them out,
    // but this results in a huge performance hit given how often
    // this routine is called during in a burn. So we opt instead to
    // just track how many of the values are meaningful, which j does
    // automatically, and ignore any data in the remaining slots.
    int i, j, k, km;

    // Note that for performance reasons we are not
    // initializing any unused values in this array.
    Array1D<Real, 0, 4> partials;

    // Some temporary variables for holding intermediate data.
    Real x, y, z;

    // These temporary variables need to be explicitly
    // constructed for the algorithm to make sense.
    // If the compiler optimizes away the statement
    // lo = y - (hi - x), the approach fails. This could
    // be avoided with the volatile keyword, but at the
    // expense of forcing additional memory usage
    // which would slow down the calculation. Instead
    // we will rely on the compiler not to optimize
    // the statement away. This should be true for gcc
    // by default but is not necessarily true for all
    // compilers. In particular, Intel does not do this
    // by default, so you must use the -assume-protect-parens
    // flag for ifort.
    Real hi, lo;

    // The first partial is just the first term.
    esum = array(1);


    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+0);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+2);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+4);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+6);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+8);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+10);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+12);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+14);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+16);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+18);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+20);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+22);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+24);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);


    return esum;
}


template<class T>
AMREX_GPU_HOST_DEVICE AMREX_INLINE
Real esum28(T const& array)
{
    // return value
    Real esum;

    // Indices for tracking the partials array.
    // j keeps track of how many entries in partials are actually used.
    // The algorithm we model this off of, written in Python, simply
    // deletes array entries at the end of every outer loop iteration.
    // The Fortran equivalent to this might be to just zero them out,
    // but this results in a huge performance hit given how often
    // this routine is called during in a burn. So we opt instead to
    // just track how many of the values are meaningful, which j does
    // automatically, and ignore any data in the remaining slots.
    int i, j, k, km;

    // Note that for performance reasons we are not
    // initializing any unused values in this array.
    Array1D<Real, 0, 4> partials;

    // Some temporary variables for holding intermediate data.
    Real x, y, z;

    // These temporary variables need to be explicitly
    // constructed for the algorithm to make sense.
    // If the compiler optimizes away the statement
    // lo = y - (hi - x), the approach fails. This could
    // be avoided with the volatile keyword, but at the
    // expense of forcing additional memory usage
    // which would slow down the calculation. Instead
    // we will rely on the compiler not to optimize
    // the statement away. This should be true for gcc
    // by default but is not necessarily true for all
    // compilers. In particular, Intel does not do this
    // by default, so you must use the -assume-protect-parens
    // flag for ifort.
    Real hi, lo;

    // The first partial is just the first term.
    esum = array(1);


    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+0);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+2);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+4);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+6);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+8);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+10);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+12);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+14);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+16);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+18);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+20);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+22);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 4; ++i) {

       km = j;
       j = 0;

       x = array(i+24);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);


    return esum;
}


template<class T>
AMREX_GPU_HOST_DEVICE AMREX_INLINE
Real esum29(T const& array)
{
    // return value
    Real esum;

    // Indices for tracking the partials array.
    // j keeps track of how many entries in partials are actually used.
    // The algorithm we model this off of, written in Python, simply
    // deletes array entries at the end of every outer loop iteration.
    // The Fortran equivalent to this might be to just zero them out,
    // but this results in a huge performance hit given how often
    // this routine is called during in a burn. So we opt instead to
    // just track how many of the values are meaningful, which j does
    // automatically, and ignore any data in the remaining slots.
    int i, j, k, km;

    // Note that for performance reasons we are not
    // initializing any unused values in this array.
    Array1D<Real, 0, 4> partials;

    // Some temporary variables for holding intermediate data.
    Real x, y, z;

    // These temporary variables need to be explicitly
    // constructed for the algorithm to make sense.
    // If the compiler optimizes away the statement
    // lo = y - (hi - x), the approach fails. This could
    // be avoided with the volatile keyword, but at the
    // expense of forcing additional memory usage
    // which would slow down the calculation. Instead
    // we will rely on the compiler not to optimize
    // the statement away. This should be true for gcc
    // by default but is not necessarily true for all
    // compilers. In particular, Intel does not do this
    // by default, so you must use the -assume-protect-parens
    // flag for ifort.
    Real hi, lo;

    // The first partial is just the first term.
    esum = array(1);


    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+0);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+2);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+4);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+6);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+8);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+10);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+12);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+14);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+16);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+18);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+20);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+22);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+24);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+26);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);


    return esum;
}


template<class T>
AMREX_GPU_HOST_DEVICE AMREX_INLINE
Real esum30(T const& array)
{
    // return value
    Real esum;

    // Indices for tracking the partials array.
    // j keeps track of how many entries in partials are actually used.
    // The algorithm we model this off of, written in Python, simply
    // deletes array entries at the end of every outer loop iteration.
    // The Fortran equivalent to this might be to just zero them out,
    // but this results in a huge performance hit given how often
    // this routine is called during in a burn. So we opt instead to
    // just track how many of the values are meaningful, which j does
    // automatically, and ignore any data in the remaining slots.
    int i, j, k, km;

    // Note that for performance reasons we are not
    // initializing any unused values in this array.
    Array1D<Real, 0, 4> partials;

    // Some temporary variables for holding intermediate data.
    Real x, y, z;

    // These temporary variables need to be explicitly
    // constructed for the algorithm to make sense.
    // If the compiler optimizes away the statement
    // lo = y - (hi - x), the approach fails. This could
    // be avoided with the volatile keyword, but at the
    // expense of forcing additional memory usage
    // which would slow down the calculation. Instead
    // we will rely on the compiler not to optimize
    // the statement away. This should be true for gcc
    // by default but is not necessarily true for all
    // compilers. In particular, Intel does not do this
    // by default, so you must use the -assume-protect-parens
    // flag for ifort.
    Real hi, lo;

    // The first partial is just the first term.
    esum = array(1);


    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+0);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+2);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+4);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+6);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+8);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+10);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+12);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+14);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+16);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+18);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+20);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+22);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 3; ++i) {

       km = j;
       j = 0;

       x = array(i+24);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);



    j = 0;
    partials(0) = esum;

    for (i = 2; i <= 4; ++i) {

       km = j;
       j = 0;

       x = array(i+26);

       for (k = 0; k <= km; ++k) {
          y = partials(k);

          if (std::abs(x) < std::abs(y)) {
             // Swap x, y
             z = y;
             y = x;
             x = z;
          }

          hi = x + y;
          lo = y - (hi - x);

          if (lo != 0.0_rt) {
             partials(j) = lo;
             j++;
          }

          x = hi;

       }

       partials(j) = x;

    }

    esum = ArrayUtil::Math::sum(partials, 0, j);


    return esum;
}


template<typename... Targs>
Real esum(Targs&&... Args) {
    constexpr int NArgs = sizeof...(Args);
    const auto varr = ArrayUtil::Virtual::array<1>(std::forward<Targs>(Args)...);

    if (NArgs == 3) return esum3(varr);
    else if (NArgs == 4) return esum4(varr);
    else if (NArgs == 5) return esum5(varr);
    else if (NArgs == 6) return esum6(varr);
    else if (NArgs == 7) return esum7(varr);
    else if (NArgs == 8) return esum8(varr);
    else if (NArgs == 9) return esum9(varr);
    else if (NArgs == 10) return esum10(varr);
    else if (NArgs == 11) return esum11(varr);
    else if (NArgs == 12) return esum12(varr);
    else if (NArgs == 13) return esum13(varr);
    else if (NArgs == 14) return esum14(varr);
    else if (NArgs == 15) return esum15(varr);
    else if (NArgs == 16) return esum16(varr);
    else if (NArgs == 17) return esum17(varr);
    else if (NArgs == 18) return esum18(varr);
    else if (NArgs == 19) return esum19(varr);
    else if (NArgs == 20) return esum20(varr);
    else if (NArgs == 21) return esum21(varr);
    else if (NArgs == 22) return esum22(varr);
    else if (NArgs == 23) return esum23(varr);
    else if (NArgs == 24) return esum24(varr);
    else if (NArgs == 25) return esum25(varr);
    else if (NArgs == 26) return esum26(varr);
    else if (NArgs == 27) return esum27(varr);
    else if (NArgs == 28) return esum28(varr);
    else if (NArgs == 29) return esum29(varr);
    else if (NArgs == 30) return esum30(varr);
    else return 0.0;

}

#endif
